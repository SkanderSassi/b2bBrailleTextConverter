import re
from bs4 import BeautifulSoup

REGEX_BBOX = r'\bbbox\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)'



def extract_hocr_lines(page, minimum_confidence = 0.8):
    """Extract lines and useful data from a hOCR page

    Args:
        page (dict): hOCR page
        minimum_confidence (float): Minimum confidence value to check for, 
        a line is doubted if it has a word that has a confidence value < minimum_confidence

    Returns:
        dict: dictionary containing content and information about extracted lines
    """
    lines = []
    minimum_confidence = minimum_confidence * 100
    soup = BeautifulSoup(page, 'lxml')
    lines_doc = soup.find_all('span', 'ocr_line')
    for line_idx, line_el in enumerate(lines_doc):
        words_el = line_el.find_all('span', 'ocrx_word')
        bbox = re.compile(REGEX_BBOX).search(line_el.get('title')).groups()
    
    #TODO Optimize
        confidences = [int(re.compile(r'\d+$').search(x.get('title')).group()) for x in words_el]
        line_dict = {'coordinates': {'x_min' : bbox[0],
                            'y_min' : bbox[1],
                            'x_max' : bbox[2],
                            'y_max' : bbox[3]
                            },
                    'line_number': line_idx,
                    'content' : ' '.join([word.text for word in words_el]),
                    'is_doubted' : any(conf < minimum_confidence for conf in confidences)
                    }
        lines.append(line_dict)
    return lines

def extract_lines(page, minimum_confidence = 0.8):
    """Extract lines and useful data from page element generated by doctr

    Args:
        page (dict): page element generated by doctr
        minimum_confidence (float): Minimum confidence value to check for, 
        a line is doubted if it has a word that has a confidence value < minimum_confidence

    Returns:
        dict: dictionary containing content and information about extracted lines
    """
    lines =[]
    line_number = 0
    for block in page['blocks']:
        for line in block['lines']:
            line_number += 1
            coordinates = line['geometry']
            line_dict = {'line_number' : line_number,
                        'is_doubted' : any(element < minimum_confidence for element in [word['confidence'] for word in line['words']]),
                        'content' : ' '.join([word['value'] for word in line['words']]),
                        'coordinates' : 
                                {'x_min' : coordinates[0][0],
                                'y_min' : coordinates[0][1],
                                'x_max' : coordinates[1][0],
                                'y_max' : coordinates[1][1],
                                },
                        }
            lines.append(line_dict)
    return lines

